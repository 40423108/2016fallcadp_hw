var tipuesearch = {"pages":[{"url":"./pages/about/","text":"2016Fall 修課成員網誌","title":"About","tags":"misc"},{"url":"./20170112di-shi-ba-zhou.html","text":"學期心得 本學期上了兩種繪圖程式，一種是簡單的單機程式，另一種是線上繪圖的程式，畫出的成品，大家都可以在網頁上看到。 2016Fall Solvespace 教學 Solvespace 1. Parts (零件繪製) 範例檔案: http://solvespace.com/bracket.pl An introductory tutorial is available, in which we draw the same part that is shown in the demo video. This covers most of the basic features of SolveSpace, including sketches, constraints, extrusions, and Boolean operations. When we first run SolveSpace, we will begin with an empty part. Initially, our view of the part will be oriented onto the XY plane; the label for that plane is displayed at the bottom left of the screen (#XY, in dark grey). The axes are also indicated by the three colored arrows at the bottom left; the X, Y, and Z axes are drawn in red, green, and blue respectively. When we hover the mouse over any entity, constraint, or other object in the sketch, that object will appear highlighted in yellow. For example, the XY plane, which is drawn as a dashed square, will appear highlighted when we hover the mouse over it. The YZ and ZX planes initially look like dashed lines, because they are being viewed on edge; but they still appear highlighted in yellow when we hold the mouse over them. It is similarly possible to highlight the X, Y, and Z axes (which are drawn as arrows), or the origin (which like all points is drawn as a green square). Extrude (平行長出或除料) Lathe (旋轉繞行長出或除料) Export Triangle Mesh STL 格式 將零件檔案轉出 STL 格式後 (binary or ASCII format definitions), 進入倉儲後, 利用 Github 內建的 stl viewer 功能 展示. three.js 2. Assembly (零件組立) http://solvespace.com/box.pl 3. Linkages (fourbar & multilink) (四連桿與多連桿運動模擬) 四連桿: 多連桿: http://solvespace.com/linkage.pl 4. Compiled & API (編譯與延伸應用) 使用 Virtualbox 虛擬主機執行 Windows 64 位元與 Ubuntu 64 位元環境中的編譯與延伸應用. Virtualbox Ubuntu 64位元虛擬檔案: http://140.130.17.17/public/Ubuntu/1604_solvespace_final/Ubuntu_160464.vdi (只有在區網可以下載) 在虛擬主機中完成 Solvespace 編譯與執行的參考畫面: 2016Fall Solvespace 教學2 這禮拜教了如何用 slovespace 繪製小方塊 以下是我畫的零件 支架 按右鍵存檔即可:)) 固定塊 按右鍵存檔即可:))</ 2016Fall Solvespace 小方塊完成 本體 按右鍵存檔即可:)) 支架 按右鍵存檔即可:)) 固定塊 按右鍵存檔即可:)) 3D印表機完成 3D印表機零件 支柱 連接桿 底盤 圓盤 本體 3D印表機完成 3D印表機零件 支柱 連接桿 底盤 圓盤 本體","title":"2017.01.12第十八週","tags":"Misc"},{"url":"./20161222di-shi-wu-zhou.html","text":"3D印表機完成 3D印表機零件 支柱 連接桿 底盤 圓盤 本體","title":"2016.12.22第十五週","tags":"Misc"},{"url":"./20161215di-shi-si-zhou.html","text":"2016Fall Solvespace 小方塊完成 本體 按右鍵存檔即可:)) 支架 按右鍵存檔即可:)) 固定塊 按右鍵存檔即可:))","title":"2016.12.15第十四週","tags":"Misc"},{"url":"./20161201di-shi-er-zhou.html","text":"2016Fall Solvespace 教學2 這禮拜教了如何用 slovespace 繪製小方塊 以下是我畫的零件 支架 按右鍵存檔即可:)) 固定塊 按右鍵存檔即可:))","title":"2016.12.01第十二週","tags":"Misc"},{"url":"./20161124di-shi-yi-zhou.html","text":"2016Fall Solvespace 教學 Solvespace 1. Parts (零件繪製) 範例檔案: http://solvespace.com/bracket.pl An introductory tutorial is available, in which we draw the same part that is shown in the demo video. This covers most of the basic features of SolveSpace, including sketches, constraints, extrusions, and Boolean operations. When we first run SolveSpace, we will begin with an empty part. Initially, our view of the part will be oriented onto the XY plane; the label for that plane is displayed at the bottom left of the screen (#XY, in dark grey). The axes are also indicated by the three colored arrows at the bottom left; the X, Y, and Z axes are drawn in red, green, and blue respectively. When we hover the mouse over any entity, constraint, or other object in the sketch, that object will appear highlighted in yellow. For example, the XY plane, which is drawn as a dashed square, will appear highlighted when we hover the mouse over it. The YZ and ZX planes initially look like dashed lines, because they are being viewed on edge; but they still appear highlighted in yellow when we hold the mouse over them. It is similarly possible to highlight the X, Y, and Z axes (which are drawn as arrows), or the origin (which like all points is drawn as a green square). Extrude (平行長出或除料) Lathe (旋轉繞行長出或除料) Export Triangle Mesh STL 格式 將零件檔案轉出 STL 格式後 (binary or ASCII format definitions), 進入倉儲後, 利用 Github 內建的 stl viewer 功能 展示. three.js 2. Assembly (零件組立) http://solvespace.com/box.pl 3. Linkages (fourbar & multilink) (四連桿與多連桿運動模擬) 四連桿: 多連桿: http://solvespace.com/linkage.pl 4. Compiled & API (編譯與延伸應用) 使用 Virtualbox 虛擬主機執行 Windows 64 位元與 Ubuntu 64 位元環境中的編譯與延伸應用. Virtualbox Ubuntu 64位元虛擬檔案: http://140.130.17.17/public/Ubuntu/1604_solvespace_final/Ubuntu_160464.vdi (只有在區網可以下載) 在虛擬主機中完成 Solvespace 編譯與執行的參考畫面:","title":"2016.11.24第十一週","tags":"Misc"},{"url":"./di-shi-zhou.html","text":"四連桿機構 Solvespace 平面四連桿機構模擬 直接利用 Solvespace Analyze-Trace Point-Stop Trace 得到下列繞行路徑: 將所得到的點座標 .csv 以 Excel 畫圖, 得到: Python3 平面四連桿機構模擬: Ubuntu 安裝 matplotlib: sudo apt-get install python3-matplotlib import math import time # 利用 matplotlib 程式庫畫出 contour 輪廓 import matplotlib.pyplot as plt class Coord(object): def __init__(self,x,y): self.x = x self.y = y def __sub__(self,other): # This allows you to substract vectors return Coord(self.x-other.x,self.y-other.y) def __repr__(self): # Used to get human readable coordinates when printing return \"Coord(%f,%f)\"%(self.x,self.y) def length(self): # Returns the length of the vector return math.sqrt(self.x**2 + self.y**2) def angle(self): # Returns the vector's angle return math.atan2(self.y,self.x) def normalize(coord): return Coord( coord.x/coord.length(), coord.y/coord.length() ) def perpendicular(coord): # Shifts the angle by pi/2 and calculate the coordinates # using the original vector length return Coord( coord.length()*math.cos(coord.angle()+math.pi/2), coord.length()*math.sin(coord.angle()+math.pi/2) ) # 點類別 class Point(object): # 起始方法 def __init__(self, x, y): self.x = x self.y = y # 加入 Eq 方法 def Eq(self, pt): self.x = pt.x self.y = pt.y # 加入 setPoint 方法 def setPoint(self, px, py): self.x = px self.y = py # 加上 distance(pt) 方法, 計算點到 pt 的距離 def distance(self, pt): self.pt = pt x = self.x - self.pt.x y = self.y - self.pt.y return math.sqrt(x * x + y * y) # Line 類別物件 class Line(object): # 起始方法 def __init__(self, p1, p2): self.p1 = p1 self.p2 = p2 # 直線的第一點, 設為線尾 self.Tail = self.p1 # 直線組成的第二點, 設為線頭 self.Head = self.p2 # 直線的長度屬性 self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2)) # setPP 以指定頭尾座標點來定義直線 def setPP(self, p1, p2): self.p1 = p1 self.p2 = p2 self.Tail = self.p1 self.Head = self.p2 self.length = math.sqrt(math.pow(self.p2.x-self.p1.x, 2)+math.pow(self.p2.y-self.p1.y,2)) # setRT 方法 for Line, 應該已經確定 Tail 點, 然後以 r, t 作為設定 Head 的參考 def setRT(self, r, t): self.r = r self.t = t x = self.r * math.cos(self.t) y = self.r * math.sin(self.t) self.Tail.Eq(self.p1) self.Head.setPoint(self.Tail.x + x,self.Tail.y + y) # getR 方法 for Line def getR(self): # x 分量與 y 分量 x = self.p1.x - self.p2.x y = self.p1.y - self.p2.y return math.sqrt(x * x + y * y) # 根據定義 atan2(y,x), 表示 (x,y) 與 正 x 軸之間的夾角, 介於 pi 與 -pi 間 def getT(self): x = self.p2.x - self.p1.x y = self.p2.y - self.p1.y if (math.fabs(x) < math.pow(10,-100)): if(y < 0.0): return (-math.pi/2) else: return (math.pi/2) else: return math.atan2(y, x) # setTail 方法 for Line def setTail(self, pt): self.pt = pt self.Tail.Eq(pt) self.Head.setPoint(self.pt.x + self.x, self.pt.y + self.y) # getHead 方法 for Line def getHead(self): return self.Head def getTail(self): return self.Tail class Link(Line): def __init__(self, p1, p2): self.p1 = p1 self.p2 = p2 self.length = math.sqrt(math.pow((self.p2.x - self.p1.x), 2) + math.pow((self.p2.y - self.p1.y), 2)) class Triangle(object): def __init__(self, p1, p2, p3): self.p1 = p1 self.p2 = p2 self.p3 = p3 def getLenp3(self): p1 = self.p1 ret = p1.distance(self.p2) return ret def getLenp1(self): p2 = self.p2 ret = p2.distance(self.p3) return ret def getLenp2(self): p1 = self.p1 ret = p1.distance(self.p3) return ret # 角度 def getAp1(self): ret = math.acos(((self.getLenp2() * self.getLenp2() + self.getLenp3() * self.getLenp3()) - self.getLenp1() * self.getLenp1()) / (2* self.getLenp2() * self.getLenp3())) return ret def getAp2(self): ret =math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp3() * self.getLenp3()) - self.getLenp2() * self.getLenp2()) / (2* self.getLenp1() * self.getLenp3())) return ret def getAp3(self): ret = math.acos(((self.getLenp1() * self.getLenp1() + self.getLenp2() * self.getLenp2()) - self.getLenp3() * self.getLenp3()) / (2* self.getLenp1() * self.getLenp2())) return ret # ends Triangle def # 透過三個邊長定義三角形 def setSSS(self, lenp3, lenp1, lenp2): self.lenp3 = lenp3 self.lenp1 = lenp1 self.lenp2 = lenp2 self.ap1 = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2* self.lenp2 * self.lenp3)) self.ap2 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2* self.lenp1 * self.lenp3)) self.ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2* self.lenp1 * self.lenp2)) # 透過兩個邊長與夾角定義三角形 def setSAS(self, lenp3, ap2, lenp1): self.lenp3 = lenp3 self.ap2 = ap2 self.lenp1 = lenp1 self.lenp2 = math.sqrt((self.lenp3 * self.lenp3 + self.lenp1 * self.lenp1) - 2* self.lenp3 * self.lenp1 * math.cos(self.ap2)) #等於 SSS(AB, BC, CA) def setSaSS(self, lenp2, lenp3, lenp1): self.lenp2 = lenp2 self.lenp3 = lenp3 self.lenp1 = lenp1 if(self.lenp1 > (self.lenp2 + self.lenp3)): #CAB 夾角為 180 度, 三點共線且 A 介於 BC 之間 ret = math.pi else : # CAB 夾角為 0, 三點共線且 A 不在 BC 之間 if((self.lenp1 < (self.lenp2 - self.lenp3)) or (self.lenp1 < (self.lenp3 - self.lenp2))): ret = 0.0 else : # 透過餘絃定理求出夾角 CAB ret = math.acos(((self.lenp2 * self.lenp2 + self.lenp3 * self.lenp3) - self.lenp1 * self.lenp1) / (2 * self.lenp2 * self.lenp3)) return ret # 取得三角形的三個邊長值 def getSSS(self): temp = [] temp.append( self.getLenp1() ) temp.append( self.getLenp2() ) temp.append( self.getLenp3() ) return temp # 取得三角形的三個角度值 def getAAA(self): temp = [] temp.append( self.getAp1() ) temp.append( self.getAp2() ) temp.append( self.getAp3() ) return temp # 取得三角形的三個角度與三個邊長 def getASASAS(self): temp = [] temp.append(self.getAp1()) temp.append(self.getLenp1()) temp.append(self.getAp2()) temp.append(self.getLenp2()) temp.append(self.getAp3()) temp.append(self.getLenp3()) return temp #2P 2L return mid P def setPPSS(self, p1, p3, lenp1, lenp3): temp = [] self.p1 = p1 self.p3 = p3 self.lenp1 = lenp1 self.lenp3 = lenp3 #bp3 is the angle beside p3 point, cp3 is the angle for line23, p2 is the output line31 = Line(p3, p1) self.lenp2 = line31.getR() #self.lenp2 = self.p3.distance(self.p1) #這裡是求角3 ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp2 * self.lenp2) - self.lenp3 * self.lenp3) / (2 * self.lenp1 * self.lenp2)) #ap3 = math.acos(((self.lenp1 * self.lenp1 + self.lenp3 * self.lenp3) - self.lenp2 * self.lenp2) / (2 * self.lenp1 * self.lenp3)) bp3 = line31.getT() cp3 = bp3 - ap3 temp.append(p3.x + self.lenp1*math.cos(cp3))#p2.x temp.append(p3.y + self.lenp1*math.sin(cp3))#p2.y return temp # 以上為相關函式物件的定義區 # 全域變數 midpt = Point(0, 0) tippt = Point(0, 0) contour = [] # 幾何位置輸入變數 x=10 y=10 r=10 # 其他輸入變數 theta = 0 degree = math.pi/180.0 dx = 2 dy = 4 #set p1.p2.p3.p4 position p1 = Point(150,100) p2 = Point(150,200) p3 = Point(300,300) p4 = Point(350,100) #create links line1 = Link(p1,p2) line2 = Link(p2,p3) line3 = Link(p3,p4) line4 = Link(p1,p4) line5 = Link(p2,p4) link2_len = p2.distance(p3) link3_len = p3.distance(p4) triangle1 = Triangle(p1,p2,p4) triangle2 = Triangle(p2,p3,p4) def simulate(): global theta, midpt, oldpt theta += dx p2.x = p1.x + line1.length*math.cos(theta*degree) p2.y = p1.y - line1.length*math.sin(theta*degree) p3.x, p3.y = triangle2.setPPSS(p2,p4,link2_len,link3_len) # 計算垂直單位向量 a = Coord(p3.x, p3.y) b = Coord(p2.x, p2.y) normal = perpendicular(normalize(a-b)) midpt.x = (p2.x + p3.x)/2 midpt.y = (p2.y + p3.y)/2 tippt.x = midpt.x + 150*normal.x tippt.y = midpt.y + 150*normal.y # 印出座標點 #print(round(tippt.x, 2), round(tippt.y, 2)) if theta < 360: contour.append((round(tippt.x, 2), round(tippt.y, 2))) for i in range(180): simulate() # 印出 contour #print(contour) x_list = [x for (x, y) in contour] y_list = [y for (x, y) in contour] plt.xlabel('x coordinate') plt.ylabel('y coordinate') plt.plot(x_list, y_list) plt.show()","title":"第十週","tags":"Misc"},{"url":"./di-qi-zhou.html","text":"四連桿機構 已經四連桿各桿尺寸, 當機構繞行一圈後求特定點的座標, 以 Solvespace 進行點座標追蹤存檔, 得到 w7_fourbar.csv 根據下圖, 試驗證 Solvespace 機構模擬的資料之正確性. Solvespace 四連桿圖檔: 按右鍵存檔","title":"第七週","tags":"Misc"},{"url":"./di-san-zhou.html","text":"先到 https://github.com/mdecourse/2016fallcadp/wiki/Solvespace_Parts 了解這篇文章 diameter直徑 oriented定位 respectively分別 plane面 equivalent相當地 construct建構 Zoom放大 mounting套、掛 axes軸(s) Initially原來 empty空 extruding擠壓 gusset扣板 sketch草圖 profile輪廓 segments段 radiused圓角 automatically自動 consists由 coincident一致 achieve達成 horizontal橫 references引用 modified改性 hover徘徊 perpendicular垂直 transparent透明 關鍵敘述： 這是一個角度支架，帶圓角的內角和扣板。角的兩個腿，和角撐，都是相同的厚度。有對稱地放置在一條腿的兩直徑相等的安裝孔。 當我們第一次運行SolveSpace，我們將與空白部分開始。最初，我們的部分的視圖將被定向在XY平面上。 該軸也通過左下角的三色箭頭表示; 在X，Y和Z軸中的紅，綠，藍分別繪製。 要旋轉我們的部分來看，點擊鼠標的中間按鈕（或車輪）拖動。要平移，請單擊並用鼠標右鍵拖動。要縮小，使用鼠標滾輪，或選擇View→放大或縮小。 要返回視圖XY平面（所以我們的觀點是平行於XY平面，以原點為中心），選擇查看→對齊視圖工作平面，或按W，或從工具欄中選擇相應的按鍵。（對於\"對齊視圖坐標系\"工具欄按鈕位於右下角。 我們將通過繪製的角度的二維橫截面，並擠出以形成的角度構造這一部分。然後，我們將使用布爾聯盟加入扣板，並削減使用布爾差分的安裝孔。 因此，要啟動，我們必須畫出角度的輪廓。這是從線段製成，加一弧（為圓角內角）。我們將與線段啟動; 所以選擇素描→直線段，或從工具欄中相應的按鍵。 要啟動線，左鍵單擊。要結束線，左再次點擊。新線段將自動創建，共享與老線段的端點。正如我們借鑒，SolveSpace會警告我們，輪廓還不是一個封閉的輪廓。 這也有可能停止按Escape鍵或者通過右鍵單擊繪圖。 配置文件現在包括六個線段，即加入六端點。我們可以通過左用鼠標拖動移動任何這些端點，並且輪廓將保持關閉。在\"不封閉輪廓\"的消息已經消失了，和輪廓內的區域在非常黑暗的藍色陰影。 我們將鼠標懸停在該左下點，所以它出現在黃色突出顯示。然後，我們左擊; 點現在看來紅色突出顯示。這意味著，該點被選定。（要取消選擇點，我們可以再次點擊它，或按Esc鍵，或者選擇編輯→取消全選。 同樣，我們可以通過左鍵單擊，選擇它的由來。在文本窗口中，我們可以看到，選擇兩個點。 我們希望這兩個點重合。我們可以用一個約束實現這一目標。選擇約束→開點/曲線/平面來約束點上點，或使用工具欄上的等效按鈕。原點不能移動，所以左下角移動，以滿足約束。 因此，將鼠標懸停在底線段和左擊以便選擇行。該線將在紅色繪製，以及有關的線路信息將顯示在文本窗口; 選擇適用於直線和曲線作為點是相同的。 現在選擇約束→水平，或從工具欄使用等效按鈕。行現在是水平的，並且一個小的品紅H被繪製以指示該約束。轟如果我們將鼠標懸停它顯示為黃色; 該約束可以選擇（然後被刪除，例如）以同樣的方式，作為實體。 並約束兩個短端蓋具有相等的長度，從而使角的兩條腿將具有相等的厚度。（選擇兩個短線段，和選擇約束→相等長度/半徑/視角。該約束被繪製為一個單一的短品紅線垂直於每個線段。 選擇配置的內眼角點，所以它以紅色突出顯示。然後選擇素描→相切圓弧在點; 一個正切弧線將自動在該點被創建。拖動端點或圓弧的中心改變的半徑。 注意，如果我們將一個點超出一定限度（依賴於我們所指定的約束），草圖可能失敗來解決，或者它可以解決意外溶液。在這種情況下，總是可以通過選擇編輯→撤消回去。 我們可以把我們的二維部分，其拉伸產生三維實體。要做到這一點，選擇新建組→擠出，或選擇工具欄上的等效按鈕。這將創建我們的擠壓。要看到我們的擠壓，通過旋轉中心用鼠標拖動的看法。 在文本窗口，SolveSpace已經自動顯示有關我們剛剛創建的擠壓信息。（如果沒有那麼我們可以通過在文本窗口左上方選擇\"家\"鏈接來查看這些信息。然後，我們會看到群體，包括G003-擠出的列表，我們剛剛創建的擠壓我們可以在這個名字點擊查看自動顯示在同一個屏幕。如果文本窗口不可見，然後選擇查看→顯示文本窗口或按Tab鍵）。 我們現在希望勾勒角撐板。我們需要創建一個新的草圖，在一個新的工作平面。我們可以將其工作平面的原點在該角度的內眼角的中點。該點存在的，但它是當前不可見的，因為它位於我們剛剛擠出的固體對象內。為了使其可見，我們必須表現出\"隱線\"，通過點擊頂部最右側的文本窗口中的圖標。這會導致顯示所有的線和點，即使它們位於所述實體模型內。（所以，就好像部分變得透明。） 我們已經離開了，點擊此處選擇這一點，所以它以紅色突出顯示。讓我們看的擠壓大約在年底，我們再中心拖動視圖，並選擇新建組→素描新的坐標系。這就產生了一個新的工作平面，與原籍在選定點處，並平行於XY平面。（如果沒有提供其他信息，然後SolveSpace捕捉到平行於坐標軸最近的工作平面，所以我們旋轉視圖很重要，這是我們之前創建的工作平面近似正確的，否則，SolveSpace可能已經捕捉到。 YZ平面或（Y，-X）面或一些其他平面代替。） 的部分已經完成，除了兩個安裝孔。我們可以得出的另一個擠壓; 除此擠壓，而不是添加材料時，應去除材料切割孔。我們必須重新創建一個新的工作平面，在此我們將利用我們的部分擠出。（大部分地區將有交替的草圖和擠壓的這種結構。） 之前，我們創建了新的工作平面中的單個點的條款，然後我們讓SolveSpace從我們的視圖方向推斷的平面的方向。該工作是因為我們的期望的定向是平行於坐標平面中的一個。在這種情況下，我們所希望的平面不平行於一個坐標平面上，因為角度托架不是（一定）90度。因此，除了該點為原點，我們指定兩個線段; 的工作平面將被定義使得兩個線段的平行於該平面。所以選擇一個點並在擠壓的背面有兩個（非平行）系，例如點和兩行如下所示。然後選擇新建組→素描新的坐標系。 我們想圓為具有相同的半徑/直徑，並且被對稱放置有關部分的中心。通過將鼠標懸停它（這樣它顯示以黃色突出顯示），然後左鍵單擊選擇每個圓圈。然後選擇約束→半徑相等。（請注意，相同的菜單項可被用於創建許多不同種類的約束，這取決於當我們選擇該菜單項什麼被選中）。 對稱放置圓，選擇每個圓的圓心。然後選擇約束→對稱。對稱約束繪製成一對品紅色箭頭，指向向內。 列表中的每個條目對應於部分的基團。第一組是在引用; 這包括諸如XY平面和原點。的參考文獻中自動創建的，並且不能修改。第一個真正的組G002-草圖平面內; 當我們開始畫，我們進行了G002繪圖。這是一個草圖功能於工作平面基團，其中該工作平面是平行於XY平面，並以原點為中心。 這個實體模型可以以多種不同的方式使用。我們可以只看著它，或導出用文件→導出位圖的截圖。或者，我們可以導出隱藏線移除的矢量繪圖，使用文件→導出2D視圖。我們可以通過選擇一個面的模型（以定義節面）的，然後選擇文件→導出2D截面導出固體的截面。 我們還可以出口本身的三維實體模型，無論是作為一個三角形網格或作為STEP文件。大多數的CAM或快速原型製作軟件希望某種類型的實體模型作為輸入。一般來說，最好盡可能使用STEP文件，因為它們代表了曲線和曲面的準確（對三角形網格，這只是一個近似值）。 Sharex這學期錄影程式 我是到這邊抓免安裝版 http://www.azofreeware.com/2014/08/sharex-portable.html 內容設定","title":"第三週","tags":"Misc"},{"url":"./di-er-zhou.html","text":"1.先到 https://github.com/mdecourse 的 2016cadp 按 Fork 2.在自己的github帳號創立一個 2016fallcadp_hw倉儲 把最下面的 Add.gitignore輸入 Python Add a license輸入 Agpl 3.在 2016fallcadp_hw倉儲 建立gh-pages分支 4.按上方的一個setting-branches-選擇gh-pages 5.在系上的電腦 輸入 140.130.17.17/2016fall 下載近端的python 6.在自己的帳號建立 40423125.github.io 說明打 my home page 把最下面的 Add.gitignore輸入 Python Add a license輸入 Agpl 7.在 40423125.github.io倉儲的左上角有一個 Create new file點進去 新增40423125.github.io.index.html 就會有自己的網頁了 8.進入 https://github.com/mdecourse/2016fallcadp/wiki 的上課筆記 下載繪圖軟體練習零件繪製: http://solvespace.com/bracket.pl","title":"第二週","tags":"Misc"},{"url":"./di-yi-zhou.html","text":"中秋放假囉","title":"第一週","tags":"Misc"}]};